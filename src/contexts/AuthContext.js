// src/contexts/AuthContext.js
// Version finale, SANS Edge Function. Toute la logique est ici.

import React, { createContext, useState, useContext, useEffect } from 'react';
import { supabase, isSupabaseConfigured } from '../lib/supabase';

const AuthContext = createContext(null);
const ADMIN_EMAIL = process.env.REACT_APP_ADMIN_EMAIL?.toLowerCase();

export const useAuth = () => useContext(AuthContext);

export const AuthProvider = ({ children }) => {
    const [user, setUser] = useState(null);
    const [session, setSession] = useState(null);
    const [isAdmin, setIsAdmin] = useState(false);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        if (!isSupabaseConfigured()) {
            console.warn('‚ö†Ô∏è Supabase non configur√© - Mode d√©mo activ√©');
            setIsLoading(false);
            return;
        }

        // 1. R√©cup√©rer la session existante au chargement
        const initializeAuth = async () => {
            try {
                const { data: { session }, error } = await supabase.auth.getSession();

                if (error) {
                    console.error('Erreur r√©cup√©ration session:', error);
                } else {
                    setSession(session);
                    const currentUser = session?.user;
                    setUser(currentUser ?? null);
                    // V√©rifier si l'utilisateur est admin
                    setIsAdmin(currentUser?.email?.toLowerCase() === ADMIN_EMAIL);
                }
            } catch (error) {
                console.error('Erreur initialisation auth:', error);
            } finally {
                setIsLoading(false);
            }
        };

        initializeAuth();

        // 2. √âcouter les changements en temps r√©el (connexion, d√©connexion)
        const { data: { subscription } } = supabase.auth.onAuthStateChange(
            async (event, session) => {
                console.log('üîÑ Auth state change:', event);

                setSession(session);
                const currentUser = session?.user;
                setUser(currentUser ?? null);
                setIsAdmin(currentUser?.email?.toLowerCase() === ADMIN_EMAIL);

                // G√©rer les diff√©rents √©v√©nements
                switch (event) {
                    case 'SIGNED_IN':
                        console.log('‚úÖ Utilisateur connect√©:', currentUser?.email);
                        break;
                    case 'SIGNED_OUT':
                        console.log('üëã Utilisateur d√©connect√©');
                        break;
                    case 'TOKEN_REFRESHED':
                        console.log('üîÑ Token rafra√Æchi');
                        break;
                    case 'USER_UPDATED':
                        console.log('üë§ Profil utilisateur mis √† jour');
                        break;
                }

                setIsLoading(false);
            }
        );

        // Nettoyage de l'√©couteur
        return () => {
            subscription?.unsubscribe();
        };
    }, []);

    // ‚úÖ LA NOUVELLE FONCTION "CERVEAU", 100% CLIENT-SIDE
    const loginOrSignUp = async (email, inviteCode) => {
        if (!isSupabaseConfigured()) throw new Error('Supabase non configur√©');
        setIsLoading(true);
        try {
            const normalizedEmail = email.toLowerCase();
            const normalizedCode = inviteCode?.toUpperCase().trim();

            // CAS 1 : L'admin se connecte
            if (normalizedEmail === ADMIN_EMAIL) {
                const { error } = await supabase.auth.signInWithOtp({ email: normalizedEmail });
                if (error) throw error;
                return { success: true, message: "Lien de connexion envoy√© √† l'admin." };
            }

            // Pour savoir si un utilisateur existe, la seule fa√ßon s√©curis√©e est de
            // lui envoyer un lien. S'il existe, il se connecte. S'il n'existe pas,
            // il sera cr√©√©, mais il ne pourra pas aller plus loin sans code.
            // ON SIMPLIFIE :

            // Si l'utilisateur fournit un code...
            if (normalizedCode) {
                // On v√©rifie si le code est valide
                const { data: codeData, error: codeError } = await supabase
                    .from('referral_codes')
                    .select('*')
                    .eq('code', normalizedCode)
                    .single();

                if (codeError || !codeData) throw new Error("Code d'invitation invalide.");
                if (!codeData.is_active) throw new Error("Ce code d'invitation a d√©j√† √©t√© utilis√©.");

                // Le code est bon ! On envoie le lien magique.
                // Supabase va cr√©er le compte s'il n'existe pas.
                const { error: magicLinkError } = await supabase.auth.signInWithOtp({ email: normalizedEmail });
                if (magicLinkError) throw magicLinkError;

                // C'est ici qu'on marquera le code comme utilis√©, une fois l'utilisateur connect√©.

                return { success: true, message: 'Code valide ! Lien de connexion envoy√©.' };
            } else {
                // Pas de code fourni. On tente une connexion simple.
                // Si l'utilisateur n'existe pas, Supabase ne cr√©era PAS de compte car
                // on a activ√© la protection "Allow new users to sign up" DANS la config Supabase.
                // Il faut s'assurer que cette option est bien D√âCOCH√âE.
                const { error } = await supabase.auth.signInWithOtp({ email: normalizedEmail });
                if (error) throw error;
                return { success: true, message: 'Lien de connexion envoy√©.' };
            }

        } catch (error) {
            console.error("Erreur Auth:", error);
            return { success: false, error: error.message };
        } finally {
            setIsLoading(false);
        }
    };

    // Fonction de connexion avec lien magique (ancienne, on la garde pour compatibilit√©)
    const signInWithMagicLink = async (email, inviteCode = '') => {
        console.warn('‚ö†Ô∏è signInWithMagicLink est d√©pr√©ci√©, utilisez loginOrSignUp');
        return loginOrSignUp(email, inviteCode);
    };

    // Fonction de d√©connexion
    const logout = async () => {
        if (!isSupabaseConfigured()) {
            console.warn('‚ö†Ô∏è Supabase non configur√©');
            return;
        }

        try {
            const { error } = await supabase.auth.signOut();

            if (error) {
                console.error('‚ùå Erreur d√©connexion:', error);
                throw error;
            }

            // R√©initialiser les √©tats locaux
            setUser(null);
            setSession(null);
            setIsAdmin(false);

            console.log('üëã D√©connexion r√©ussie');

        } catch (error) {
            console.error('Erreur lors de la d√©connexion:', error);
            // Forcer la r√©initialisation m√™me en cas d'erreur
            setUser(null);
            setSession(null);
            setIsAdmin(false);
        }
    };

    // Valeur du contexte
    const value = {
        // √âtats
        user,
        session,
        isAdmin,
        isAuthenticated: !!user,
        isLoading,

        // Actions
        loginOrSignUp,      // ‚úÖ Nouvelle fonction principale
        signInWithMagicLink, // Gard√©e pour compatibilit√©
        logout,

        // Helpers
        userEmail: user?.email || null,
        userId: user?.id || null
    };

    return (
        <AuthContext.Provider value={value}>
            {children}
        </AuthContext.Provider>
    );
};

export default AuthContext;