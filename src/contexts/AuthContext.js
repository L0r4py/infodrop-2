// src/contexts/AuthContext.js
// Version finale, connect√©e √† Supabase

import React, { createContext, useState, useContext, useEffect } from 'react';
import { supabase, isSupabaseConfigured } from '../lib/supabase';

// Cr√©er le contexte
const AuthContext = createContext(null);

// Email admin depuis les variables d'environnement
const ADMIN_EMAIL = process.env.REACT_APP_ADMIN_EMAIL?.toLowerCase() || 'admin@example.com';

// Log pour v√©rifier que la variable est bien charg√©e (√† retirer en production)
if (process.env.NODE_ENV === 'development') {
    console.log('üîß Admin email configur√©:', ADMIN_EMAIL);
}

// Hook personnalis√© pour utiliser le contexte
export const useAuth = () => {
    const context = useContext(AuthContext);
    if (!context) {
        throw new Error('useAuth doit √™tre utilis√© dans un AuthProvider');
    }
    return context;
};

// Provider du contexte
export const AuthProvider = ({ children }) => {
    const [user, setUser] = useState(null);
    const [session, setSession] = useState(null);
    const [isAdmin, setIsAdmin] = useState(false);
    const [isLoading, setIsLoading] = useState(true); // Commence √† true

    // √âcouter les changements d'√©tat de l'authentification
    useEffect(() => {
        if (!isSupabaseConfigured()) {
            console.warn('‚ö†Ô∏è Supabase non configur√© - Mode d√©mo activ√©');
            setIsLoading(false);
            return;
        }

        // 1. R√©cup√©rer la session existante au chargement
        const initializeAuth = async () => {
            try {
                const { data: { session }, error } = await supabase.auth.getSession();

                if (error) {
                    console.error('Erreur r√©cup√©ration session:', error);
                } else {
                    setSession(session);
                    const currentUser = session?.user;
                    setUser(currentUser ?? null);
                    // V√©rifier si l'utilisateur est admin
                    setIsAdmin(currentUser?.email?.toLowerCase() === ADMIN_EMAIL);
                }
            } catch (error) {
                console.error('Erreur initialisation auth:', error);
            } finally {
                setIsLoading(false);
            }
        };

        initializeAuth();

        // 2. √âcouter les changements en temps r√©el (connexion, d√©connexion)
        const { data: { subscription } } = supabase.auth.onAuthStateChange(
            async (event, session) => {
                console.log('üîÑ Auth state change:', event);

                setSession(session);
                const currentUser = session?.user;
                setUser(currentUser ?? null);
                setIsAdmin(currentUser?.email?.toLowerCase() === ADMIN_EMAIL);

                // G√©rer les diff√©rents √©v√©nements
                switch (event) {
                    case 'SIGNED_IN':
                        console.log('‚úÖ Utilisateur connect√©:', currentUser?.email);
                        break;
                    case 'SIGNED_OUT':
                        console.log('üëã Utilisateur d√©connect√©');
                        break;
                    case 'TOKEN_REFRESHED':
                        console.log('üîÑ Token rafra√Æchi');
                        break;
                    case 'USER_UPDATED':
                        console.log('üë§ Profil utilisateur mis √† jour');
                        break;
                }

                setIsLoading(false);
            }
        );

        // Nettoyage de l'√©couteur
        return () => {
            subscription?.unsubscribe();
        };
    }, []);

    // ‚úÖ NOUVELLE FONCTION "CERVEAU" - loginOrSignUp
    const loginOrSignUp = async (email, inviteCode) => {
        if (!isSupabaseConfigured()) throw new Error('Supabase non configur√©');

        setIsLoading(true);
        try {
            const normalizedEmail = email.toLowerCase();
            const normalizedCode = inviteCode?.toUpperCase().trim() || '';

            // CAS 1 : L'utilisateur est l'admin
            if (normalizedEmail === ADMIN_EMAIL) {
                console.log("üîë Connexion de l'admin...");
                const { error } = await supabase.auth.signInWithOtp({
                    email: normalizedEmail,
                    options: {
                        emailRedirectTo: window.location.origin
                    }
                });
                if (error) throw error;
                return { success: true, message: "Lien de connexion envoy√© √† l'admin." };
            }

            // Pour les autres, on appelle la fonction Edge
            console.log("üîç V√©rification de l'utilisateur...");

            const { data, error } = await supabase.functions.invoke('auth-flow', {
                body: {
                    email: normalizedEmail,
                    inviteCode: normalizedCode
                },
            });

            if (error) throw error;
            if (!data.success) throw new Error(data.message);

            // Si la fonction serveur demande d'envoyer le magic link
            if (data.action === 'send_magic_link') {
                console.log("üìß Envoi du lien magique...");
                const { error: linkError } = await supabase.auth.signInWithOtp({
                    email: normalizedEmail,
                    options: {
                        emailRedirectTo: window.location.origin
                    }
                });

                if (linkError) throw linkError;

                return {
                    success: true,
                    message: "Lien de connexion envoy√© ! Consultez votre bo√Æte mail."
                };
            }

            return { success: true, message: data.message };

        } catch (error) {
            console.error("‚ùå Erreur Auth:", error);
            return { success: false, error: error.message };
        } finally {
            setIsLoading(false);
        }
    };

    // Fonction de connexion avec lien magique (ancienne, on la garde pour compatibilit√©)
    const signInWithMagicLink = async (email, inviteCode = '') => {
        console.warn('‚ö†Ô∏è signInWithMagicLink est d√©pr√©ci√©, utilisez loginOrSignUp');
        return loginOrSignUp(email, inviteCode);
    };

    // Fonction de d√©connexion
    const logout = async () => {
        if (!isSupabaseConfigured()) {
            console.warn('‚ö†Ô∏è Supabase non configur√©');
            return;
        }

        try {
            const { error } = await supabase.auth.signOut();

            if (error) {
                console.error('‚ùå Erreur d√©connexion:', error);
                throw error;
            }

            // R√©initialiser les √©tats locaux
            setUser(null);
            setSession(null);
            setIsAdmin(false);

            console.log('üëã D√©connexion r√©ussie');

        } catch (error) {
            console.error('Erreur lors de la d√©connexion:', error);
            // Forcer la r√©initialisation m√™me en cas d'erreur
            setUser(null);
            setSession(null);
            setIsAdmin(false);
        }
    };

    // Valeur du contexte
    const value = {
        // √âtats
        user,
        session,
        isAdmin,
        isAuthenticated: !!user,
        isLoading,

        // Actions
        loginOrSignUp,      // ‚úÖ Nouvelle fonction principale
        signInWithMagicLink, // Gard√©e pour compatibilit√©
        logout,

        // Helpers
        userEmail: user?.email || null,
        userId: user?.id || null
    };

    return (
        <AuthContext.Provider value={value}>
            {children}
        </AuthContext.Provider>
    );
};

export default AuthContext;